{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileInfo","Object","keys","profile","length","className","styles","profileBlock","src","photos","large","fullName","aboutMe","contacts","vk","Preloader","Post","item","alt","post","likeCounter","MyPosts","React","memo","postsElements","posts","map","el","id","postsBox","AddPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfileAC","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,aAAe,oC,oBCAjCD,EAAOC,QAAU,CAAC,SAAW,0BAA0B,MAAQ,yB,oBCA/DD,EAAOC,QAAU,CAAC,KAAO,qB,6ICuCVC,EAtCgB,SAACC,GAAgB,IAAD,EACXC,oBAAS,GADE,mBACpCC,EADoC,KAC1BC,EAD0B,OAEfF,mBAASD,EAAMI,QAFA,mBAEpCA,EAFoC,KAE5BC,EAF4B,KAI3CC,qBAAW,WACPD,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAcV,OACI,iCACMF,GACF,8BACI,sBAAMK,cAhBO,WACrBJ,GAAY,IAeJ,SAAwCH,EAAMI,QAAU,gBAIxDF,GACA,8BACI,uBAAOM,OAnBI,WACvBL,GAAY,GACZH,EAAMS,aAAaL,IAiB4BM,SAd5B,SAACC,GACpBN,EAAUM,EAAEC,cAAcC,QAa+CA,MAAOT,EAAQU,WAAS,UCH1FC,EAjBK,SAACf,GACjB,OAAKgB,OAAOC,KAAKjB,EAAMkB,SAASC,OAI5B,qBAAKC,UAAWC,IAAOC,aAAvB,SACI,gCACI,qBAAKC,IAAKvB,EAAMkB,QAAQM,OAAOC,QAC/B,cAAC,EAAD,CAAwBrB,OAAQJ,EAAMI,OAAQK,aAAcT,EAAMS,eAClE,8BAAMT,EAAMkB,QAAQQ,WACpB,8BAAM1B,EAAMkB,QAAQS,UACpB,8BAAM3B,EAAMkB,QAAQU,SAASC,UAT9B,cAACC,EAAA,EAAD,K,oCCOAC,EAbF,SAAC/B,GACV,OACI,8BACI,sBAAKoB,UAAWC,IAAOW,KAAvB,UACI,qBACIT,IAAI,sGAAsGU,IAAK,SACnH,4BAAIjC,EAAMkC,OACV,yCAAYlC,EAAMmC,qB,iCCF5BC,EAAUC,IAAMC,MAAK,SAACtC,GAExB,IAAMuC,EAAgBvC,EAAMwC,MACvBC,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAkBR,KAAMQ,EAAGR,KAAMC,YAAaO,EAAGP,aAAtCO,EAAGC,OAM7B,OACI,sBAAKvB,UAAWC,IAAOuB,SAAvB,UACI,8DACA,0CACA,cAACC,EAAD,CAAkBC,SARR,SAACC,GACf/C,EAAMgD,QAAQD,EAAOE,gBAQjB,qBAAK7B,UAAWC,IAAOmB,MAAvB,SACKD,UAMXW,EAAcC,YAAiB,IAkB/BN,EAAmBO,YAAU,CAACC,KAAM,eAAjBD,EAjBL,SAACpD,GAEjB,OACI,uBAAM8C,SAAU9C,EAAMsD,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,KAAM,cACNC,YAAY,OACZC,SAAU,CAACC,IAAUX,OAEhC,8BACI,sDASDd,I,gBCjCA0B,EAHUC,aAdD,SAACC,GACrB,MAAO,CACHxB,MAAOwB,EAAMC,YAAYzB,UAIN,SAAC0B,GACxB,MAAO,CACHlB,QAAS,SAACC,GACNiB,EAASC,YAAUlB,QAKNc,CAA8C3B,GCExDgC,EATC,SAACpE,GACb,OACI,gCACI,cAAC,EAAD,CAAakB,QAASlB,EAAMkB,QAASd,OAAQJ,EAAMI,OAAQK,aAAcT,EAAMS,eAC/E,cAAC,EAAD,Q,eCWN4D,E,uKACF,WACI,IAAIC,EAASC,KAAKvE,MAAMwE,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKvE,MAAM0E,mBAEhBH,KAAKvE,MAAM2E,QAAQC,KAAK,UAGhCL,KAAKvE,MAAM6E,iBAAiBP,GAC5BC,KAAKvE,MAAM8E,UAAUR,K,oBAGzB,WACI,OACI,cAAC,EAAD,2BAAaC,KAAKvE,OAAlB,IAAyBkB,QAASqD,KAAKvE,MAAMkB,QAASd,OAAQmE,KAAKvE,MAAMI,OAChEK,aAAc8D,KAAKvE,MAAMS,oB,GAhBf4B,IAAM0C,WA4BtBC,sBACXjB,aARoB,SAACC,GAAD,MAA6C,CACjE9C,QAAS8C,EAAMC,YAAY/C,QAC3Bd,OAAQ4D,EAAMC,YAAY7D,OAC1BsE,iBAAkBV,EAAMiB,KAAKX,OAC7BY,OAAQlB,EAAMiB,KAAKC,UAIM,CAACL,qBAAkBC,cAAWrE,mBACvD0E,IAFWH,CAIbX","file":"static/js/3.1c962bba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"ProfileInfo_profileBlock__2UghZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBox\":\"MyPosts_postsBox__2ZtEn\",\"posts\":\"MyPosts_posts__3Cy1l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__7VESA\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props: any) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\r\n            </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input onBlur={deactivateEditMode} onChange={onStatusChange} value={status} autoFocus/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import Preloader from \"../../common/Preloader/Preloader\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport { ProfileType } from \"../../../redux/profile-reducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) =>void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!Object.keys(props.profile).length) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={styles.profileBlock}>\r\n            <div>\r\n                <img src={props.profile.photos.large}/>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                <div>{props.profile.fullName}</div>\r\n                <div>{props.profile.aboutMe}</div>\r\n                <div>{props.profile.contacts.vk}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport styles from './Post.module.css'\r\n\r\ntype messagesType = {\r\n    post: string\r\n    likeCounter: number\r\n\r\n}\r\nconst Post = (props: messagesType) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.item}>\r\n                <img\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQWQSxF0x14uZ0Xmv1uplRjzDshwu4WzwbkEA&usqp=CAU\" alt={\"post\"}/>\r\n                <p>{props.post}</p>\r\n                <span>like {props.likeCounter}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport styles from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {PostType} from \"../../../redux/store\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: PostType[]\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts\r\n        .map(el => <Post key={el.id} post={el.post} likeCounter={el.likeCounter}/>)\r\n\r\n    const onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.postsBox}>\r\n            <p>.............................</p>\r\n            <h2>my posts</h2>\r\n            <AddPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={styles.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst AddPostForm = (props: any) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={\"newPostText\"}\r\n                       placeholder=\"post\"\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm({form: \"addPostForm\"})(AddPostForm)\r\n\r\n\r\nexport default MyPosts;","import MyPosts from \"../MyPosts\";\r\nimport {addPostAC} from \"../../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport store, {AppStateType} from \"../../../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: typeof store.dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from \"./Profile\"\r\nimport {connect} from \"react-redux\"\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {getStatus, getUserProfileAC, ProfileType, updateStatus} from \"../../redux/profile-reducer\"\r\nimport {MapStatePropsTypeForRedirect} from \"../../hoc/withAuthRedirect\"\r\nimport {compose} from \"redux\"\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\n\r\ntype PathParamsType = {\r\n    userId: string | null\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: string | null\r\n    isAuth: boolean\r\n}\r\nexport type MapDispatchPropsType = {\r\n    getUserProfileAC: (userId: string | null) => void\r\n    getStatus: (userId: string | null) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType & MapStatePropsTypeForRedirect\r\n//@ts-ignore\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfileAC(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileAC, getStatus, updateStatus}),\r\n    withRouter,\r\n    //withAuthRedirect,\r\n)(ProfileContainer)"],"sourceRoot":""}