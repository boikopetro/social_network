{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/Message/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","styles","dialogUser","to","name","Message","massage","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","el","messagesElements","messages","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageAC","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,0B,kFCc/HC,EATI,SAACC,GAChB,IAAMC,EAAO,YAAcD,EAAME,GACjC,OACI,qBAAKC,UAAWC,IAAOC,WAAvB,SACI,cAAC,IAAD,CAASC,GAAIL,EAAb,SAAoBD,EAAMO,UCGvBC,EANC,SAACR,GACb,OACI,qBAAKG,UAAWC,IAAOK,QAAvB,SAAiCT,EAAMU,W,iCC8BzCC,EAAYC,YAAiB,KAmB7BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAlBL,SAACd,GAEpB,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXb,KAAM,iBACNc,YAAa,UACbC,SAAU,CAACC,IAAUZ,OAGhC,8BACI,iDAQDa,EA7CC,SAACxB,GACb,IAAMyB,EAAQzB,EAAM0B,YACdC,EAAkBF,EAAMG,QACzBC,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAAYvB,KAAMuB,EAAGvB,KAAML,GAAI4B,EAAG5B,IAAS4B,EAAG5B,OACvD6B,EAAmBN,EAAMO,SAC1BH,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAASpB,QAASoB,EAAGpB,SAAcoB,EAAG5B,OAMrD,OACI,sBAAKC,UAAWC,IAAOwB,QAAvB,UACI,qBAAKzB,UAAWC,IAAO6B,aAAvB,SACKN,IAEL,qBAAKxB,UAAWC,IAAO4B,SAAvB,SACKD,IAEL,cAAClB,EAAD,CAAqBG,SAbP,SAACkB,GACnBlC,EAAMmC,YAAYD,EAAOE,uB,iCCIlBC,sBACXC,aAdoB,SAACb,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACa,GACxB,MAAO,CACHJ,YAAa,SAACC,GACVG,EAASC,YAAcJ,SAO/BK,IAFWJ,CAGbb","file":"static/js/4.9d364e81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Dialogs_content__3Ls2f\",\"dialogs\":\"Dialogs_dialogs__33EGK\",\"dialogsItems\":\"Dialogs_dialogsItems__91coZ\",\"active\":\"Dialogs_active__1Cmek\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from './../Dialogs.module.css'\r\nimport {DialogItemType} from \"../../../redux/store\";\r\n\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    const path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={styles.dialogUser}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from \"react\";\r\nimport styles from './../Dialogs.module.css'\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={styles.massage}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from \"react\";\r\nimport {MessagesPageType} from \"../../redux/store\";\r\nimport styles from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: MessagesPageType\r\n    isAuth: boolean\r\n};\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    const state = props.dialogsPage;\r\n    const dialogsElements = state.dialogs\r\n        .map(el => <DialogItem name={el.name} id={el.id} key={el.id}/>);\r\n    const messagesElements = state.messages\r\n        .map(el => <Message message={el.message} key={el.id}/>);\r\n    const addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    //if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n        </div>\r\n    )\r\n};\r\nconst maxLength = maxLengthCreator(100);\r\nconst AddMessageForm = (props: any) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={\"newMessageBody\"}\r\n                       placeholder={\"message\"}\r\n                       validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport Dialogs from \"../Dialogs\";\r\nimport {sendMessageAC} from \"../../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport store, {AppStateType} from \"../../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {MessagesPageType} from \"../../../redux/store\";\r\n\r\ntype MapStateToPropsType = { dialogsPage: MessagesPageType }\r\n\r\ntype MapDispatchToPropsType = { sendMessage: (newMessageBody: string) => void }\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: typeof store.dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect (mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs);\r\n"],"sourceRoot":""}